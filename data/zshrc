export EDITOR=nano
export GITFOLDER=~/git
export WORKSPACEFOLDER=~/workspace
export DOTFILES=~/dotfiles
export ARCHFLAGS="-arch x86_64"
export ZSH=~/.oh-my-zsh
export PATH="$HOME/.rbenv/bin:$PATH"
export JAVA_HOME=/usr/lib/jvm/default 
export PATH=$HOME/bin:/usr/local/bin:$PATH:$HOME/.bin:$HOME/.toolbox/bin:$PATH
export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"

export SPARK_HOME=/opt/apache-spark
export PATH=$SPARK_HOME/bin:$PATH

export HADOOP_HOME=/usr/lib/hadoop
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
export HADOOP_OPTS="-Djava.library.path=$HADOOP_COMMON_LIB_NATIVE_DIR" 

export DOCKER_HOST=unix:///var/run/docker.sock

DISABLE_AUTO_UPDATE="true"
HIST_STAMPS="mm/dd/yyyy"

plugins=(git docker jsontools archlinux lein mvn sudo web-search ssh-agent)

source $ZSH/oh-my-zsh.sh
source $HOME/.work/zshrc

# Filesystem
alias .='cd'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ogit='nano $GITFOLDER'
alias cgit='cd $GITFOLDER'
alias cdot='cd $DOTFILES'
alias odot='nano $DOTFILES'
alias cde='cd $GITFOLDER/elmar'
alias cdp='cd $GITFOLDER/personal'
alias cdt='cd $GITFOLDER/third-party'
alias ws='cd $WORKSPACEFOLDER'
# Helpers
chpwd() ls

alias c='clear'
alias e='exit'
alias df='df -h'
alias clear='clear && neofetch --off'
alias ping='ping -c 5'
alias zshrc='nano ~/.zshrc'
alias szshrc='source ~/.zshrc'
alias grep='grep --color=auto'
alias reboot='sudo shutdown -r now'
alias shutdown='sudo shutdown -h now'
alias suspend='sudo systemctl suspend'
alias openboxrc='nano ~/.config/openbox/rc.xml'
alias weather='curl wttr.in/Dublin'
alias json-file-pretty='jq .'
alias json-file-minify='jq -c .'
json-console-pretty() {
 echo "$1" | jq .
}
json-console-minify() {
 echo "$1" | jq -c .
}
alias enableipv6='sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0'
alias disableipv6='sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1'

eval "$(thefuck --alias)"

# ssh agent
zstyle :omz:plugins:ssh-agent agent-forwarding on

# auto complete for alias
setopt complete_aliases

# zsh-bd
source $HOME/.zsh/plugins/bd/bd.zsh

# git-flow-auto
source $HOME/.zsh/plugins/git-flow-auto/git-flow-completion.zsh

#alias-tip
source $HOME/.zsh/plugins/alias-tips/alias-tips.plugin.zsh

# TMUX
if which tmux >/dev/null 2>&1; then
    # if no session is started, start a new session
    test -z ${TMUX} && tmux

    # when quitting tmux, try to attach
    while test -z ${TMUX}; do
        tmux attach || break
    done
fi

function virtualenv_info {
    [ $VIRTUAL_ENV ] && echo '('`basename $VIRTUAL_ENV`') '
}

# Theme, modified version of https://github.com/tylerreckart/hyperzsh
# The prompt
PROMPT='$(_user_host)%{$fg[cyan]%}%~ $(git_prompt_info)%{$reset_color%}$(_git_time_since_commit)$(git_prompt_status)${_return_status}
$(_python_venv)%B%F{yellow}λ%f%b '
RPROMPT='%{$fg[green]%}[%*]%{$reset_color%}'

local _return_status="%{$fg[red]%}%(?..⍉ )%{$reset_color%}"

# Just show user name
function _user_host() {
  echo "%{$fg[yellow]%}%n%{$reset_color%} in "
}

# Determine if there is an active Python virtual environment
function _python_venv() {
  if [[ $VIRTUAL_ENV != "" ]]; then
    echo "%{$fg[blue]%}(${VIRTUAL_ENV##*/})%{$reset_color%} "
  fi
}

# Format for git_prompt_long_sha() and git_prompt_short_sha()
ZSH_THEME_GIT_PROMPT_SHA_BEFORE="%{$fg[yellow]%}"
ZSH_THEME_GIT_PROMPT_SHA_AFTER="%{$reset_color%} "

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[green]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY=" %{$fg[red]%}✗%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[white]%}◒ "
ZSH_THEME_GIT_PROMPT_CLEAN=" "
ZSH_THEME_GIT_PROMPT_ADDED="%{$fg[cyan]%}✓ "
ZSH_THEME_GIT_PROMPT_MODIFIED="%{$fg[yellow]%}△ "
ZSH_THEME_GIT_PROMPT_DELETED="%{$fg[red]%}✖ "
ZSH_THEME_GIT_PROMPT_RENAMED="%{$fg[blue]%}➜ "
ZSH_THEME_GIT_PROMPT_UNMERGED="%{$fg[cyan]%}§ "
ZSH_THEME_GIT_PROMPT_AHEAD="%{$fg[blue]%}▲ "

ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT="%{$fg[white]%}"
ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM="%{$fg[yellow]%}"
ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG="%{$fg[red]%}"
ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL="%{$fg[white]%}"

#
# Determine the time since last commit. If branch is clean,
# use a neutral color, otherwise colors will vary according to time.
function _git_time_since_commit() {
# Only proceed if there is actually a commit.
  if git log -1 > /dev/null 2>&1; then
    # Get the last commit.
    last_commit=$(git log --pretty=format:'%at' -1 2> /dev/null)
    now=$(date +%s)
    seconds_since_last_commit=$((now-last_commit))

    # Totals
    minutes=$((seconds_since_last_commit / 60))
    hours=$((seconds_since_last_commit/3600))

    # Sub-hours and sub-minutes
    days=$((seconds_since_last_commit / 86400))
    sub_hours=$((hours % 24))
    sub_minutes=$((minutes % 60))

    if [ $hours -gt 24 ]; then
      commit_age="${days}d "
    elif [ $minutes -gt 60 ]; then
      commit_age="${sub_hours}h${sub_minutes}m "
    else
      commit_age="${minutes}m "
    fi
    if [[ -n $(git status -s 2> /dev/null) ]]; then
        if [ "$hours" -gt 4 ]; then
            COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_LONG"
        elif [ "$minutes" -gt 30 ]; then
            COLOR="$ZSH_THEME_GIT_TIME_SHORT_COMMIT_MEDIUM"
        else
            COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_SHORT"
        fi
    else
        COLOR="$ZSH_THEME_GIT_TIME_SINCE_COMMIT_NEUTRAL"
    fi


    echo "$COLOR$commit_age%{$reset_color%}"
  fi
}

